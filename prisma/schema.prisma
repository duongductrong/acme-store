// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Product {
  id                String            @id @default(cuid()) @db.VarChar(25)
  title             String
  slug              String            @unique
  SKU               String            @unique
  price             Int
  quantity          Int
  stockAvailability Boolean?          @default(true)
  thumbnail         String
  description       String
  content           String?
  status            Status            @default(Enabled)
  visibility        ProductVisibility @default(Visible)

  metadata   ProductMetadata? @relation(fields: [metadataId], references: [id])
  metadataId String?          @db.VarChar(25)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.VarChar(25)

  orders OrderProduct[]

  media   ProductMedia? @relation(fields: [mediaId], references: [id])
  mediaId Int?

  attributeGroup   ProductAttributeGroup? @relation(fields: [attributeGroupId], references: [id])
  attributeGroupId String?                @db.VarChar(25)

  @@map("products")
}

model ProductMedia {
  id      Int       @id @default(autoincrement())
  Product Product[]

  datatype String
  path     String
  width    Int
  height   Int
  size     Int?
  caption  String?
  keywords String?

  @@map("product_medias")
}

model ProductMetadata {
  id String @id @default(cuid()) @db.VarChar(25)

  metaTitle       String?
  metaKeyword     String?
  metaDescription String?

  Product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([id])
  @@map("product_metadatas")
}

enum Status {
  Enabled
  Disabled
}

enum ProductVisibility {
  Visible
  NotVisible
}

enum ProductStockAvailability {
  Yes
  No
}

model Category {
  id          String  @id @default(cuid()) @db.VarChar(25)
  name        String
  slug        String  @db.Text
  banner      String?
  description String?
  status      Status  @default(Enabled)

  metadata   CatagoryMetadata? @relation(fields: [metadataId], references: [id])
  metadataId String?           @db.VarChar(25)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@map("categories")
}

model CatagoryMetadata {
  id String @id @default(cuid()) @db.VarChar(25)

  metaTitle       String?
  metaKeyword     String?
  metaDescription String?

  Category Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@map("category_metadatas")
}

model Collection {
  id          Int     @id @default(autoincrement()) @db.Int
  name        String
  slug        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collections")
}

model User {
  id   Int    @id @unique @default(autoincrement()) @db.Int
  code String @unique @db.Char(16)

  firstName      String
  lastName       String
  email          String @unique
  passwordHashed String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   RoleBased @relation(fields: [roleId], references: [id])
  roleId String    @db.VarChar(25)

  @@index([id, code])
  @@map("users")
}

model Coupon {
  id             Int          @id @default(autoincrement()) @db.Int
  code           String       @db.Char(24)
  discountType   DiscountType
  discountAmount Int          @db.Int
  description    String?
  startDate      DateTime     @default(now())
  endDate        DateTime     @default(now())
  status         Status

  isFreeshipping Boolean? @default(false)
  usedTimes      Int?     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupons")
}

enum DiscountType {
  Percent
  Price
}

model Order {
  id          Int    @id @default(autoincrement()) @db.Int
  orderNumber String @unique @db.Char(16)

  customerId    String  @unique
  customerEmail String
  customerPhone String?
  customerNote  String?

  shipmentStatus OrderShipmentStatus @default(Unfullfilled)
  paymentStatus  OrderPaymentStatus  @default(Unpaid)

  orderCouponCode     String
  orderDiscount       Int    @default(0)
  orderTotalAmount    Int    @default(0)
  orderSubTotalAmount Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products OrderProduct[]

  @@map("orders")
}

enum OrderShipmentStatus {
  Unfullfilled
  Fullfilled
}

enum OrderPaymentStatus {
  Unpaid
  Paid
  Refunded
}

model OrderProduct {
  id Int @id @default(autoincrement()) @db.Int

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.VarChar(25)

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @db.Int

  productAmount Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model ProductAttribute {
  id        String               @id @default(cuid()) @db.VarChar(25)
  name      String
  code      String               @unique
  type      ProductAttributeType @default(Select)
  options   Json?                @db.Json
  sortOrder Int                  @db.Int

  isRequired       Boolean @default(true)
  isFilterable     Boolean @default(true)
  isShowToCustomer Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups ProductAttributesOnGroups[]

  @@map("product_attributes")
}

model ProductAttributeGroup {
  id String @id @default(cuid()) @db.VarChar(25)

  name String @db.VarChar(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attributes ProductAttributesOnGroups[]
  Product    Product[]

  @@map("product_attribute_groups")
}

model ProductAttributesOnGroups {
  productAttribute   ProductAttribute @relation(fields: [productAttributeId], references: [id])
  productAttributeId String           @db.VarChar(25)

  productAttributeGroup   ProductAttributeGroup @relation(fields: [productAttributeGroupId], references: [id])
  productAttributeGroupId String                @db.VarChar(25)

  @@id([productAttributeId, productAttributeGroupId])
  @@map("product_attributes_on_groups")
}

enum ProductAttributeType {
  Text
  Select
  Multiselect
}

model ProductVariant {
  id String @id @default(cuid()) @db.VarChar(25)

  @@map("product_variants")
}

model RoleBased {
  id String @id @default(cuid()) @db.VarChar(25)

  name        String
  description String?

  policies Json?  @db.Json
  users    User[]

  @@map("roles_based")
}
